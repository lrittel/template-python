# Build the documentation.
[group('docs')]
build-docs:
{%- if package_manager == 'uv' +%}
    uv run mkdocs build
{%- elif package_manager == 'poetry' +%}
    poetry run mkdocs build
{%- endif %}

# Serves the documentation on a local webserver.
[group('docs')]
serve-docs:
{%- if package_manager == 'uv' +%}
    uv run mkdocs serve --watch ./src
{%- elif package_manager == 'poetry' +%}
    poetry run mkdocs serve --watch ./src
{%- endif %}

# Runs the full test suite.
[group('tests')]
run-tests *PYTEST_FLAGS:
{%- if package_manager == 'uv' +%}
    uv run pytest {{ PYTEST_FLAGS }}
{%- elif package_manager == 'poetry' +%}
    poetry run pytest {{ PYTEST_FLAGS }}
{%- endif %}

# Runs the full test suite whenever a file changes.
[group('tests')]
watch-tests *PYTEST_FLAGS:
    #!/usr/bin/env bash
    # 2 is the return value when a new file was added.
    while true; do
        fd -e py | entr -cd just run-tests {{ PYTEST_FLAGS }}
        if [ "$?" -ne 2 ] ; then
            break
        fi
        sleep 0.5
    done

# Run the pre-commit hook manually.
[group('ci')]
run-pre-commit:
{%- if package_manager == 'uv' +%}
    uv run pre-commit run
{%- elif package_manager == 'poetry' +%}
    poetry run pre-commit run
{%- endif %}

# Run the pre-commit hook manually on all files.
run-pre-commit-all:
{%- if package_manager == 'uv' +%}
    uv run pre-commit run --all
{%- elif package_manager == 'poetry' +%}
    poetry run pre-commit run --all
{%- endif %}

{%- if use_github_workflow +%}
# Run the GitHub Actions workflows locally.
[group('ci')]
run-workflows:
    act
{%- endif %}
{#
vim: syntax=just
#}
