{# 
Use the dict() syntax to avoid the pipe operator because it does not seem to
be possible to escape it in Jinja2.
#}
{%- set dependencies = dict([
    (None, [
    ] + ([
        ("click", ">=8.2.1,<9.0.0", None),
    ] if use_py_click else [])),
    ("dev", [
        ("black", ">=25.1.0,<26.0.0", "^25.1.0"),
        ("isort", ">=6.0.1,<7.0.0", "^6.0.1"),
    ] + ([
        ("commitizen", ">=4.8.3,<5.0.0", "^4.8.3"),
    ] if use_commitizen else []) + ([
        ("pre-commit", ">=4.2.0,<5.0.0", "^4.2.0"),
    ] if use_pre_commit else [])),
    ("test", [
        ("pytest", ">=8.4.0,<9.0.0", "^8.4.0"),
        ("pytest-asyncio", ">=1.0.0,<2.0.0", "^1.0.0"),
    ]),
] + [
    ("docs", [
        ("mkdocs", ">=1.6.1,<2.0.0", "^1.6.1"),
        ("mkdocstrings", ">=0.29.1,<0.30.0", "^0.29.1"),
        ("mkdocs-material", ">=9.6.14,<10.0.0", "^9.6.14"),
        ("mkdocs-autorefs", ">=1.4.2,<2.0.0", "^1.4.2"),
    ]),
] if use_mkdocs else []
)
-%}
{% macro format_dependency_pyproject(spec) -%}
    "{{ spec[0] }}{{ spec[1] }}"
{%- endmacro %}
{% macro format_dependency_poetry(spec) -%}
{{ spec[0] }} = "{{ spec[2] }}"
{%- endmacro %}
[project]
name = "{{ project_name }}"
version = "0.0.0"
description = "{{ description }}"
authors = []
readme = "README.md"
requires-python = ">={{ min_python_version }},<4"
dependencies = [
{% for spec in dependencies[None] -%}
    {{ format_dependency_pyproject(spec) }},
{% endfor %}
]


[project.scripts]
{{ project_name }} = "{{ root_module_name }}.main:main"


{% if package_manager == 'uv' -%}
[dependency-groups]
{% for group, specs in dependencies.items() if group != None %}
{{ group }} = [
{% for spec in specs -%}
    {{ format_dependency_pyproject(spec) }},
{% endfor %}
]
{%- endfor %}

[tool.uv]
default-groups = [
{% for group in dependencies.keys() if group != None %}
    "{{ group }}",
{% endfor %}
]

[tool.hatch.build.targets.sdist]
include = ["src/{{ root_module_name }}"]

[tool.hatch.build.targets.wheel]
include = ["src/{{ root_module_name }}"]

[tool.hatch.build.targets.wheel.sources]
"src/{{ root_module_name }}" = "{{ root_module_name }}"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
{% elif package_manager == 'poetry' -%}
[tool.poetry]
packages = [{ include = "{{ root_module_name }}", from = "src" }]

{% for group, specs in dependencies.items() if group != None %}
[tool.poetry.group.{{ group }}.dependencies]
{% for spec in specs -%}
{{ format_dependency_poetry(spec) }}
{% endfor %}
{% endfor %}


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
{%- endif %}


[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
log_cli_level = "DEBUG"


[tool.black]


[tool.isort]
profile = "black"
src_paths = ["src", "tests"]
skip_gitignore = true


{% if use_commitizen -%}
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$major.$minor.$patch$prerelease"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true
#changelog_start_rev = "v0.1.0"
changelog_incremental = false
allowed_prefixes = ["fixup!", "squash!"]
{%- endif %}
{#
vim: syntax=toml.jinja
#}
